import os
import random
import time


# Funci√≥n para limpiar consola
def limpiar_pantalla():
    if os.name == "posix":  # En sistemas tipo Unix (macOS y Linux)
        os.system("clear")
    elif os.name == "nt":  # En Windows
        os.system("cls")


def dame_palabra():
    """
    selecciona una palabra random de una lista

    Returns:
        str: la palabra de la lista
    """
    palabras = ["arbol", "casa", "moto", "teclado", "manzana"]
    return random.choice(palabras)


def ocultar_palabra(palabra):
    '''
    Funci√≥n que oculta la palabra en una lista

    Args:
        palabra (str): la palabra a ocultar

    Returns:
        str: la palabra oculta
    '''
    lista = []
    for _ in palabra:
        lista.append('_')
    return ''.join(lista)


def verificar_una_letra():
    """
    Funci√≥n que verifica si el usuario ingres√≥ correctamente el tipo y si la letra es de longitud 1

    Returns:
        str: la letra que ingres√≥
    """
    letra_ingresada = None
    while True:
        letra_ingresada = input("Ingrese una letra: ")
        if len(letra_ingresada) == 1 and not letra_ingresada.isnumeric():
            return letra_ingresada
        else:
            print("Por Favor ingrese correctamente un caracter. Intentelo de nuevo")


def jugar_partida():
    '''
    Esta funci√≥n maneja una partida individual del juego del ahorcado.
    Ejecuta el juego y sigue pidiendo al jugador que adivine letras
    hasta que el jugador gane, pierda o alcance el l√≠mite de intentos (5).
    '''
    palabra_secreta = dame_palabra().upper()
    letras_oculta = list(ocultar_palabra(palabra_secreta))
    letras_adivinadas = []
    letras_incorrectas = []
    contador = 0

    while ''.join(letras_oculta) != palabra_secreta and contador < 6:
        mostrar_ahorcado(contador)  # Muestra el estado actual del ahorcado
        print(" "*31,' '.join(letras_oculta))  # Muestra las letras adivinadas y espacios en blanco para las no adivinadas
        print("")
        print("Letras Incorrectas:",'-'.join(letras_incorrectas))  # Muestra las letras incorrectas ingresadas por el jugador
        print("")
        print("Intentos permitidos:", 6-len(letras_incorrectas))  # Muestra intentos restantes
        print("")
        letra = verificar_una_letra().upper()  # Solicita al jugador que ingrese una letra

        if letra in palabra_secreta:



            for pos, ch in enumerate(palabra_secreta, 0):
            # Verifica si la letra ingresada por el jugador est√° en la palabra secreta y es igual al car√°cter en la posici√≥n actual
                if letra in palabra_secreta and letra == ch:
                 
                    letras_oculta[pos] = letra  # Actualiza la palabra oculta con la letra adivinada
                
        # Verifica si la letra ingresada por el jugador no est√° en la palabra secreta
        if letra not in palabra_secreta:
            letras_incorrectas.append(letra)  # Agrega la letra incorrecta a la lista de letras incorrectas
            contador += 1  # Incrementa el contador de intentos fallidos

    palabra_adivinada = ''.join(letras_oculta)  # Convierte las letras adivinadas en una cadena
    estado_juego(contador, palabra_adivinada, palabra_secreta)  # Verifica el estado del juego despu√©s del bucle

def intro():
   
    img = ["",
           r"                                                                          .-.",
           r"                            || |                   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó            ) )",
           r"                            || |   ,               ‚ïë ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚ïë           '-'",
           r"                            || |  | |              ‚ïë ‚ïë       ‚ïë‚ïë",
           r"                            || '--' |              ‚ïë ‚ïë       ",
           r"                      ,,    || .----'              ‚ïë ‚ïë       ",
           r"                     || |   || |                   ‚ïë ‚ïë       ",
           r"                     |  '---'| |                   ‚ïë ‚ïë       ",
           r"                     '------.| |                   ‚ïë ‚ïë     ",
           r"                     ((_))  || |                   ‚ïë ‚ïë       ",
           r"                     (o o)  || |                 __‚ïë ‚ïë__       ",     
           r"                   ___\_/___||_|________________‚ïë_______‚ïë___________",
           r"                 ",  
           r"     >>===============================================================================<<",
           r"     || $$$$$$\   $$$$$$\         $$$$$$\   $$$$$$\  $$\      $$\ $$$$$$$$\  $$$$$$\  ||",
           r"     ||$$  __$$\ $$  __$$\       $$  __$$\ $$  __$$\ $$$\    $$$ |$$  _____|$$  __$$\ ||",
           r"     ||$$ /  \__|$$ /  $$ |      $$ /  \__|$$ /  $$ |$$$$\  $$$$ |$$ |      $$ /  \__|||",
           r"     ||$$ |$$$$\ \$$$$$$$ |      $$ |$$$$\ $$$$$$$$ |$$\$$\$$ $$ |$$$$$\    \$$$$$$\  ||",
           r"     ||$$ |\_$$ | \____$$ |      $$ |\_$$ |$$  __$$ |$$ \$$$  $$ |$$  __|    \____$$\ ||",
           r"     ||$$ |  $$ |$$\   $$ |      $$ |  $$ |$$ |  $$ |$$ |\$  /$$ |$$ |      $$\   $$ |||",
           r"     ||\$$$$$$  |\$$$$$$  |      \$$$$$$  |$$ |  $$ |$$ | \_/ $$ |$$$$$$$$\ \$$$$$$  |||",
           r"     || \______/  \______/        \______/ \__|  \__|\__|     \__|\________| \______/ ||",
           r"     >>===============================================================================<<",]

    animador_img(img,0.05)
    time.sleep(1)

def jugar_ahorcado():
    '''
    Esta funci√≥n es la funci√≥n principal del juego del ahorcado.

    Inicia el juego, selecciona una palabra secreta y llama a la funci√≥n para jugar una partida.
    Tambi√©n permite al usuario decidir si desea continuar jugando despu√©s de una partida.

    La funci√≥n se ejecuta hasta que el usuario decida no continuar jugando.
    '''
    continuar = None
    opcion_seleccionada = menu()
    while continuar != 'n' and not opcion_seleccionada is None:
        continuar = input("Desea continuar jugando? SI(s)-NO(n): ").lower()
        if continuar == 's':

            jugar_partida()  # Llama a la funci√≥n para jugar una partida.
           
            continue
        elif continuar == 'n':
            break
        elif continuar != 's' or continuar != 'n':
            print('Ingrese correctamente.') # Mensaje de error si el usuario ingresa una opci√≥n inv√°lida.
            continue



def menu():

    '''
    Funci√≥n que muestra un menu con las opciones de jugar al juego o salir de la aplicaci√≥n

    returns:
        int o None: la opci√≥n seleccionada
    '''
    limpiar_pantalla()
    print('''
    \b\b\b\bJuego del ahorcado Grupo 9

    1. Jugar
    2. Salir
    ''')
    while True:
        opcion = input("Seleccionar opci√≥n: ")
        if opcion.isnumeric() and opcion == '1':

            jugar_partida()
            return int(opcion)
        elif opcion.isnumeric() and opcion == '2':
            break   # Se rompe el bucle y devuelve None - Cuando una funci√≥n no devuelve nada por default es None
        else:
            print('Ingrese correctamente.') # Mensaje de error si el usuario ingresa una opci√≥n inv√°lida.
            continue



def estado_juego(intentos, palabra_correcta, palabra_secreta):
    '''
    Imprime en pantalla si el usuario gan√≥ o perdi√≥

    Args:
        intentos (int): n√∫mero de intentos realizados
        palabra_correcta (str): palabra adivinada por el usuario
        palabra_secreta (str): palabra secreta que el usuario debe adivinar
    '''
    limpiar_pantalla()
    if intentos == 6: 
        img_perdiste()

    elif palabra_correcta == palabra_secreta:
        img_ganaste()



def mostrar_ahorcado(intentos):
    """
    Muestra una representaci√≥n gr√°fica
    del estado actual del ahorcado basado
    en el n√∫mero de intentos restantes
    """
    limpiar_pantalla()
    if intentos == 0:
        print(
            r"""                                  
                                                                    .-.
                      || |                   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó            ) )
                      || |   ,               ‚ïë ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚ïë           '-'
                      || |  | |              ‚ïë ‚ïë       ‚ïë‚ïë
                      || '--' |              ‚ïë ‚ïë       
                ,,    || .----'              ‚ïë ‚ïë       
               || |   || |                   ‚ïë ‚ïë       
               |  '---'| |                   ‚ïë ‚ïë       
               '------.| |                   ‚ïë ‚ïë          
               ((_))  || |                   ‚ïë ‚ïë
               (o o)  || |                 __‚ïë ‚ïë__            
               _\_/___||_|________________‚ïë_______‚ïë___________
          """
        )
    elif intentos == 1:
        print(
           r"""                                  
                                                                    .-.
                      || |                   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó            ) )
                      || |   ,               ‚ïë ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚ïë           '-'
                      || |  | |              ‚ïë ‚ïë       ‚ïë‚ïë
                      || '--' |              ‚ïë ‚ïë       üé©
                ,,    || .----'              ‚ïë ‚ïë       
               || |   || |                   ‚ïë ‚ïë       
               |  '---'| |                   ‚ïë ‚ïë       
               '------.| |                   ‚ïë ‚ïë          
               ((_))  || |                   ‚ïë ‚ïë
               (o o)  || |                 __‚ïë ‚ïë__            
               _\_/___||_|________________‚ïë_______‚ïë___________
          """
        )
    elif intentos == 2:
        print(
            r"""                                  
                                                                    .-.
                      || |                   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó            ) )
                      || |   ,               ‚ïë ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚ïë           '-'
                      || |  | |              ‚ïë ‚ïë       ‚ïë‚ïë
                      || '--' |              ‚ïë ‚ïë       üé©
                ,,    || .----'              ‚ïë ‚ïë       üò≠
               || |   || |                   ‚ïë ‚ïë       
               |  '---'| |                   ‚ïë ‚ïë       
               '------.| |                   ‚ïë ‚ïë          
               ((_))  || |                   ‚ïë ‚ïë
               (o o)  || |                 __‚ïë ‚ïë__            
               _\_/___||_|________________‚ïë_______‚ïë___________
          """
        )
    elif intentos == 3:
        print(
            r"""                                  
                                                                    .-.
                      || |                   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó            ) )
                      || |   ,               ‚ïë ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚ïë           '-'
                      || |  | |              ‚ïë ‚ïë       ‚ïë‚ïë
                      || '--' |              ‚ïë ‚ïë       üé©
                ,,    || .----'              ‚ïë ‚ïë       üò≠
               || |   || |                   ‚ïë ‚ïë       üëï
               |  '---'| |                   ‚ïë ‚ïë       
               '------.| |                   ‚ïë ‚ïë          
               ((_))  || |                   ‚ïë ‚ïë
               (o o)  || |                 __‚ïë ‚ïë__            
               _\_/___||_|________________‚ïë_______‚ïë___________
          """
        )
    elif intentos == 4:
        print(
            r"""                                  
                                                                    .-.
                      || |                   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó            ) )
                      || |   ,               ‚ïë ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚ïë           '-'
                      || |  | |              ‚ïë ‚ïë       ‚ïë‚ïë
                      || '--' |              ‚ïë ‚ïë       üé©
                ,,    || .----'              ‚ïë ‚ïë       üò≠
               || |   || |                   ‚ïë ‚ïë       üëï
               |  '---'| |                   ‚ïë ‚ïë       üëñ
               '------.| |                   ‚ïë ‚ïë          
               ((_))  || |                   ‚ïë ‚ïë
               (o o)  || |                 __‚ïë ‚ïë__            
               _\_/___||_|________________‚ïë_______‚ïë___________
          """
        )
    elif intentos == 5:
        print(
            r"""                                  
                                                                    .-.
                      || |                   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó            ) )
                      || |   ,               ‚ïë ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚ïë           '-'
                      || |  | |              ‚ïë ‚ïë       ‚ïë‚ïë
                      || '--' |              ‚ïë ‚ïë       üé©
                ,,    || .----'              ‚ïë ‚ïë       üò≠
               || |   || |                   ‚ïë ‚ïë       üëï
               |  '---'| |                   ‚ïë ‚ïë       üëñ
               '------.| |                   ‚ïë ‚ïë       üß¶  
               ((_))  || |                   ‚ïë ‚ïë
               (o o)  || |                 __‚ïë ‚ïë__            
               _\_/___||_|________________‚ïë_______‚ïë___________
          """
        )       
        


def img_ganaste():
   
    # se arma una lista con cada liena de la imagen 
    img = [r"",
           r"                        .* *.               `o`o` ",                                
           r"                        *. .*              o`o`o`o      ^,^,^",
           r"                          * \               `o`o`     ^,^,^,^,^",
           r"                             \     ***        |       ^,^,^,^,^",
           r"                              \   *****       |        /^,^,^",
           r"                               \   ***        |       /",
           r"                   ~@~*~@~      \   \         |      /",
           r"                 ~*~@~*~@~*~     \   \        |     /",
           r"                 ~*~@~*~@~*~      \   \       |    /     #$#$#        .`'.;.",
           r"                 ~*~@~*~@~*~       \   \      |   /     #$#$#$#   00  .`,.',",
           r"                   ~@~*~@~ \        \   \     |  /      /#$#$#   /|||  `.,'",
           r"                ____________\________\___\____|_/______/_________|\/\___||______",
           r"               ",
           r"                $$$$$$$$\                                            $$\ ",
           r"                $$  __$$\                                           $$ | ",
           r"                $$ /  \__| $$$$$$\  $$$$$$$\   $$$$$$\   $$$$$$$\ $$$$$$\    $$$$$$\  ",
           r"                $$ |$$$$\  \____$$\ $$  __$$\  \____$$\ $$  _____|\_$$  _|  $$  __$$\ ",
           r"                $$ |\_$$ | $$$$$$$ |$$ |  $$ | $$$$$$$ |\$$$$$$\    $$ |    $$$$$$$$ |",
           r"                $$ |  $$ |$$  __$$ |$$ |  $$ |$$  __$$ | \____$$\   $$ |$$\ $$   ____|",
           r"                \$$$$$$  |\$$$$$$$ |$$ |  $$ |\$$$$$$$ |$$$$$$$  |  \$$$$  |\$$$$$$$\ ",
           r"                \______/  \_______|\__|  \__| \_______|\_______/    \____/  \_______| "]
    
    animador_img(img,0.05)
        

    print(r'''       


    ''')

def img_perdiste():
    img = [r"",
           r"                                                                          .-.",
           r"                            || |                   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó            ) )",
           r"                            || |   ,               ‚ïë ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚ïë           '-'",
           r"                            || |  | |              ‚ïë ‚ïë       ‚ïë‚ïë",
           r"                            || '--' |              ‚ïë ‚ïë       üíÄ",
           r"                      ,,    || .----'              ‚ïë ‚ïë       F",
           r"                     || |   || |                   ‚ïë ‚ïë       I",
           r"                     |  '---'| |                   ‚ïë ‚ïë       N",
           r"                     '------.| |                   ‚ïë ‚ïë     ",
           r"                     ((_))  || |                   ‚ïë ‚ïë       ",
           r"                     (o o)  || |                 __‚ïë ‚ïë__       ",     
           r"                   ___\_/___||_|________________‚ïë_______‚ïë___________",
           r"                 ",  
           r"                   $$$$$$$\                            $$ |$$\             $$\ ",
           r"                   $$  __$$\                           $$ |\__|            $$ |",
           r"                   $$ |  $$ | $$$$$$\   $$$$$$\   $$$$$$$ |$$\  $$$$$$$\ $$$$$$\    $$$$$$\ ",
           r"                   $$$$$$$  |$$  __$$\ $$  __$$\ $$  __$$ |$$ |$$  _____|\_$$  _|  $$  __$$\ ",
           r"                   $$  ____/ $$$$$$$$ |$$ |  \__|$$ /  $$ |$$ |\$$$$$$\    $$ |    $$$$$$$$ |",
           r"                   $$ |      $$   ____|$$ |      $$ |  $$ |$$ | \____$$\   $$ |$$\ $$   ____|",
           r"                   $$ |      \$$$$$$$\ $$ |      \$$$$$$$ |$$ |$$$$$$$  |  \$$$$  |\$$$$$$$\ ",
           r"                   \__|       \_______|\__|       \_______|\__|\_______/    \____/  \_______|"]
      
    animador_img(img,0.05)


def animador_img(img, segundos):
   '''
   crea una animaci√≥n que muestra una imagen l√≠nea por l√≠nea,
   donde cada l√≠nea se muestra de abajo hacia arriba. 
   La velocidad de la animaci√≥n se controla mediante la pausa de x segundos entre cada l√≠nea.
   '''
 

    #Comienza un bucle while que se ejecutar√° mientras el valor de cont sea menor o igual a la longitud de la lista img. 
    #Esto significa que la animaci√≥n se ejecutar√° para cada l√≠nea de la imagen.
   cont = 0
   while cont <= len(img):
       
       #se encarga de limpiar la pantalla de la consola para que la animaci√≥n se muestre de forma limpia.
       limpiar_pantalla()
        
       
       #aqui se dibuja la secuencia de imagen debido a que si el recorrido es normal la imagen se dibuja en forma inversa 
       #por ello serecorre una secuencia de n√∫meros en orden inverso, desde la longitud de la lista img hasta 1.
       #Esto significa que i tomar√° valores desde la longitud de la lista hacia abajo
       for i in range(len(img), 0, -1):
          
           #  se decide qu√© l√≠nea de la imagen imprimir y cu√°l dejar en blanco.
           #  Si i es menor que cont, se imprime la l√≠nea img[i*-1]. 
           # Nota que i*-1 se usa para acceder a las l√≠neas en orden inverso. 
           # Si i es mayor o igual a cont, se imprime una l√≠nea en blanco.
           if i<cont:
             print(img[i*-1])
             
           else: 
             print("")

       #Se agrega una pausa de 0.1 segundos antes de continuar con la pr√≥xima iteraci√≥n del bucle while. Esto controla la velocidad de la animaci√≥n.
       time.sleep(segundos)
       cont +=1          



if __name__ == '__main__':
    intro()
    jugar_ahorcado()


#Comentarios letras_adivinadas.insert(pos, letra)  no funciona

